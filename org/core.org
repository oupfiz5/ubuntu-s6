#+title: Ubuntu base docker image using s6-overlay
* Auxiliary Information                                            :noexport:
The setupfile contain global common property configuration:
#+SETUPFILE: .configuration/global_vars_org.setup
#+SETUPFILE: .configuration/global_property_org.setup
#+SETUPFILE: .configuration/global_vars_html.setup

* About

This is [[https://hub.docker.com/_/ubuntu][ubuntu base docker image]] (version 20.04) using [[https://github.com/just-containers/s6-overlay][s6-overlay]].

Ubuntu-s6 is self-hosting at https://chiselapp.com/user/oupfiz5/repository/ubuntu-s6.

If you are reading this on GitHub, then you are looking at a Git mirror of the self-hosting Ubuntu-s6 repository.  The purpose of that mirror is to test and exercise Fossil's ability to export a Git mirror and using Github CI/CD  (Github Actions). Nobody much uses the GitHub mirror, except to verify that the mirror logic works. If you want to know more about Ubuntu-s6, visit the official self-hosting site linked above.

* Table of Contents :TOC_3:noexport:
- [[#about][About]]
- [[#installation][Installation]]
  - [[#download-from-dockerhub][Download from dockerhub]]
  - [[#build-from-chiselapp-fossil][Build from chiselapp (fossil)]]
  - [[#build-from-github][Build from github]]
- [[#configuration-options][Configuration options]]
  - [[#general-options][General options]]
  - [[#timezone][Timezone]]
- [[#continues-integration][Continues Integration]]
- [[#troubleshooting][Troubleshooting]]
  - [[#log-output][Log output]]
  - [[#shell-access][Shell access]]
- [[#code][Code]]
  - [[#version][VERSION]]
  - [[#githubworkflowson-pushyaml][../.github/workflows/on-push.yaml]]
  - [[#githubworkflowstestyaml][../.github/workflows/test.yaml]]
  - [[#githubtrigger_on_push][../.github/.trigger_on_push]]
  - [[#gitignore][../.gitignore]]
  - [[#dockerfile][Dockerfile]]
  - [[#shellchecksh][shellcheck.sh]]
  - [[#docker_image_checksh][docker_image_check.sh]]
  - [[#dockleignore][.dockleignore]]
  - [[#dockerfile_checksh][dockerfile_check.sh]]
  - [[#hookbuildsh][hook/build.sh]]
  - [[#hookpushsh][hook/push.sh]]
  - [[#rootfsetccont-finishdgitignore][rootfs/etc/cont-finish.d/.gitignore]]
  - [[#rootfsetccont-initd00_settimezonesh][rootfs/etc/cont-init.d/00_settimezone.sh]]
  - [[#rootfsetcfix-attrsdgitignore][rootfs/etc/fix-attrs.d/.gitignore]]
  - [[#rootfsetcservicesdgitignore][rootfs/etc/services.d/.gitignore]]

* Installation
** Download from dockerhub
#+begin_example
docker pull oupfiz5/ubuntu-s6:latest
docker pull oupfiz5/ubuntu-s6:20.04
#+end_example

** Build from chiselapp (fossil)
#+begin_example
fossil clone https://chiselapp.com/user/oupfiz5/repository/ubuntu-s6 ubuntu-s6.fossil
mkdir ubuntu-s6
cd ubuntu-s6
fossil open ../ubuntu-s6.fossil
docker build -t oupfiz5/ubuntu-s6 .
#+end_example

** Build from github
#+begin_example
git clone https://github.com/oupfiz5/ubuntu-s6.git
cd ubuntu-s6
docker build -t oupfiz5/ubuntu-s6 .
#+end_example

* Configuration options
** General options
|--------+---------+-------------------------------------|
| Option | Default | Description                         |
|--------+---------+-------------------------------------|
| TZ     | UTC     | Set timezone, example Europe/Moscow |
|--------+---------+-------------------------------------|

** Timezone
Set the timezone for the container, defaults to UTC. To set the
timezone set the desired timezone with the variable TZ.

#+begin_example
docker run -itd --restart always \
           --name ubuntu-s6  \
           --env 'TZ=Europe/Moscow' \
           oupfiz5/ubuntu-s6:latest
#+end_example

* Continues Integration
For  build and push docker images we use  [[https://github.com/oupfiz5/ubuntu-s6/blob/master/.github/workflows/on-push.yaml][Github Actions workflow]]. Flow process is [[https://guides.github.com/introduction/flow/][GitHub flow]].
* Troubleshooting
** Log output
For debugging and maintenance purposes you may want access the output log. If you are using Docker version 1.3.0 or higher you can access a running containers shell by starting bash using docker interactive:

#+begin_example
docker run -it --rm \
       --name=ubuntu-s6 \
       oupfiz5/ubuntu-s6:latest
#+end_example

** Shell access
   For debugging and maintenance purposes you may want access the containers shell. If you are using Docker version 1.3.0 or higher you can access a running containers shell by starting bash using docker exec:
#+begin_example
docker exec -it ubuntu-s6 /bin/bash
#+end_example
* Code :code:
** VERSION :code:
#+begin_src sh :shebang ""
S6_OVERLAY_VERSION='2.2.0.3'
UBUNTU_VERSION='20.04'
#+end_src
** ../.github/workflows/on-push.yaml :code:
#+begin_src yaml :shebang ""
  name: Build and push docker images

  on:
    push:
      paths:
        - .github/workflows/on-push.yaml
        - .github/.trigger_on_push
        - Dockerfile
        - rootfs/*
        - hook/*
      branches:
        - version-*
        # - master


  jobs:
    build:
      name: Build and push dockerhub
      runs-on: ubuntu-latest
      steps:
        - name: Repo checkout
          uses: actions/checkout@v2

        - name: Login to DockerHub Registry
          run: |
            echo  ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

        - name: Build images
          run: |
            cd ${GITHUB_WORKSPACE}/hook
            ./build.sh

        - name: Push images
          run: |
            cd ${GITHUB_WORKSPACE}/hook
            ./push.sh
#+end_src

** ../.github/workflows/test.yaml :code:
#+begin_src yaml :shebang ""
  name: Tests

  # * Controls
  # Controls when the action will run.
  on: [push, pull_request, workflow_dispatch]

  # * Jobs
  jobs:
    checks:
      name: Checks shell code and Dockerfile
      runs-on: ubuntu-20.04
      steps:
        - name: Repo checkout
          uses: actions/checkout@v2

        - name: Check shell files (shellcheck)
          run: |
            sudo apt-get update -y
            sudo apt-get install shellcheck
            cd src
            ./shellcheck.sh

        - name: Check dockerfile (hadolint)
          run: |
            cd src
            ./dockerfile_check.sh

    build_docker_image:
      name: Build docker image
      runs-on: ubuntu-20.04
      steps:
        - name: Repo checkout
          uses: actions/checkout@v2

        - name: Build image
          run: |
            cd ${GITHUB_WORKSPACE}/src
            set -a; source VERSION ; set +a;
            docker build \
            --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            --build-arg S6_OVERLAY_VERSION="${S6_OVERLAY_VERSION}" \
            --build-arg UBUNTU_VERSION="${UBUNTU_VERSION}" \
            -t "oupfiz5/ubuntu-s6:${{ github.sha }}" \
            -f ./Dockerfile \
            .

        - name: Check image (dockle)
          run: |
            cd ${GITHUB_WORKSPACE}/src
            docker image ls
            ./docker_image_check.sh "oupfiz5/ubuntu-s6:${{ github.sha }}"

    docker_check:
      name: Checks docker image
      needs: build_docker_image
      runs-on: ubuntu-20.04
      steps:
        - name: Repo checkout
          uses: actions/checkout@v2

        - name: Check image (dockle)
          run: |
            cd ${GITHUB_WORKSPACE}/src
            docker image ls
            # ./docker_image_check.sh "oupfiz5/ubuntu-s6:${{ github.sha }}"
#+end_src
** ../.github/.trigger_on_push :code:
#+begin_src sh :shebang ""
  Trigger:1
#+end_src
** ../.gitignore :code:
#+begin_src sh :shebang ""
  .fslckout
  .projectile
#+end_src
** Dockerfile :code:
#+begin_src sh :shebang ""
  # * Base image
  ARG UBUNTU_VERSION=20.04
  FROM ubuntu:${UBUNTU_VERSION}

  # * Arguments
  ARG S6_OVERLAY_VERSION=2.2.0.3 \
      BUILD_DATE \
      UBUNTU_VERSION

  # * Labels
  LABEL \
      maintainer="Oupfiz V <oupfiz5@yandex.ru>" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.authors="Oupfiz V (Five)" \
      org.opencontainers.image.url="https://chiselapp.com/user/oupfiz5/repository/ubuntu-s6/home" \
      org.opencontainers.image.documentation="https://chiselapp.com/user/oupfiz5/repository/ubuntu-s6/wiki" \
      org.opencontainers.image.source="https://chiselapp.com/user/oupfiz5/repository/ubuntu-s6/brlist" \
      org.opencontainers.image.version="0.0.3d" \
      org.opencontainers.image.revision="" \
      org.opencontainers.image.vendor="" \
      org.opencontainers.image.licenses="" \
      org.opencontainers.image.ref.name="" \
      org.opencontainers.image.title="Ubuntu image with s6 init system" \
      org.opencontainers.image.description="Ubuntu base docker image using s6-overlay" \
      org.opencontainers.ubuntu.version="${UBUNTU_VERSION}" \
      org.opencontainers.s6overlay.version="${S6_OVERLAY_VERSION}"

  # * Environment

  # * Copy
  COPY rootfs/ /

  # * Add
  ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-amd64.tar.gz /tmp/s6-overlay.tar.gz

  # * Run
  # hadolint ignore=DL3008,DL3003
  RUN apt-get update && \
      DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata --no-install-recommends && \
      apt-get clean && \
      rm -rf /var/lib/apt/lists/* && \
      cd /tmp && \
      tar xzf /tmp/s6-overlay.tar.gz -C / --exclude='./bin' && \
      tar xzf /tmp/s6-overlay.tar.gz -C /usr ./bin && \
      rm /tmp/s6-overlay.tar.gz

  # * Entrypoint
  ENTRYPOINT ["/init"]
#+end_src
** shellcheck.sh :code:
#+begin_src sh :results output pp :noweb strip-export :dir ../src
  set -e

  targets=()
  while IFS=  read -r -d $'\0'; do
      targets+=("$REPLY")
  done < <(
    find \
      rootfs/etc \
      hook \
      ./*.sh \
      -type f \
      -print0
    )


  # shell_check.sh \
  # dockerfilecheck.sh \

  ls -la
  echo "Shellcheck main files"
  LC_ALL=C.UTF-8 shellcheck "${targets[@]}"

  # VERSION were exclude from main check (above)
  # exclude warning https://github.com/koalaman/shellcheck/wiki/SC2034
  echo "Shellcheck VERSION"
  LC_ALL=C.UTF-8 shellcheck --shell=sh --exclude=SC2034 VERSION

  exit $?
#+end_src

** docker_image_check.sh :code:
#+begin_src sh :results output pp :noweb strip-export :dir ../src
  set -e
  IMAGE_NAME="${1:-oupfiz5/ubuntu-s6:latest}"

  # * Install dockle and check targets
  # Pay attention: some checks are ignored using .dockleignore
  VERSION=$(
      curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
          grep '"tag_name":' | \
          sed -E 's/.*"v([^"]+)".*/\1/' \
         ) && docker run --rm \
                         -v /var/run/docker.sock:/var/run/docker.sock \
                         -v "$(pwd)"/.dockleignore:/.dockleignore \
                         goodwithtech/dockle:v"${VERSION}" \
                         --exit-code 1 \
                         --exit-level fatal \
                         "${IMAGE_NAME}"
  exit $?
#+end_src

#+RESULTS:
#+begin_example
[35mINFO[0m	- [36mCIS-DI-0005[0m: Enable Content trust for Docker
        ,* export DOCKER_CONTENT_TRUST=1 before docker pull/build
[35mINFO[0m	- [36mCIS-DI-0006[0m: Add HEALTHCHECK instruction to the container image
        ,* not found HEALTHCHECK statement
[35mINFO[0m	- [36mCIS-DI-0008[0m: Confirm safety of setuid/setgid files
        ,* setgid file: grwxr-xr-x usr/sbin/pam_extrausers_chkpwd
        ,* setgid file: grwxr-xr-x usr/bin/expiry
        ,* setuid file: urwxr-xr-x usr/bin/passwd
        ,* setuid file: urwxr-xr-x usr/bin/gpasswd
        ,* setuid file: urwxr-xr-x usr/bin/chfn
        ,* setuid file: urwxr-xr-x usr/bin/umount
        ,* setgid file: grwxr-xr-x usr/sbin/unix_chkpwd
        ,* setuid file: urwxr-xr-x usr/bin/s6-overlay-preinit
        ,* setgid file: grwxr-xr-x usr/bin/chage
        ,* setuid file: urwxr-xr-x usr/bin/mount
        ,* setuid file: urwxr-xr-x usr/bin/chsh
        ,* setgid file: grwxr-xr-x usr/bin/wall
        ,* setuid file: urwxr-xr-x usr/bin/su
        ,* setuid file: urwxr-xr-x usr/bin/newgrp
[34mIGNORE[0m	- [36mCIS-DI-0001[0m: Create a user for the container
[34mIGNORE[0m	- [36mCIS-DI-0009[0m: Use COPY instead of ADD in Dockerfile
[34mIGNORE[0m	- [36mDKL-DI-0006[0m: Avoid latest tag
#+end_example

** .dockleignore :code:
#+begin_src sh :shebang ""
# Use COPY instead of ADD in Dockerfile because need to add s6-overlay from urlencode
CIS-DI-0009
# Use latest tag because to check the image inside only
DKL-DI-0006
# set root to default user because it will be use for next build
CIS-DI-0001
#+end_src
** dockerfile_check.sh :code:
#+begin_src sh :results output pp :noweb strip-export :dir ../src
    set -e

    # * Get list of targets
    targets=()
    while IFS=  read -r -d $'\0'; do
        targets+=("$REPLY")
    done < <(
      find \
         Dockerfile \
        -type f \
        -print0
      )


    # * Pull hadolint and check targets
    docker run --rm -i hadolint/hadolint < "${targets[@]}" && echo "success"

    exit $?
#+end_src

#+RESULTS:
: success

** hook/build.sh :code:
#+begin_src sh  :results output pp :noweb strip-export :dir ../src/hook
  # shellcheck disable=SC1091
  set -a; source ../VERSION ; set +a;

  # CIS-DI-0005: Enable Content trust for Docker
  export DOCKER_CONTENT_TRUST=1

  docker build \
         --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
         --build-arg S6_OVERLAY_VERSION="${S6_OVERLAY_VERSION}" \
         --build-arg UBUNTU_VERSION="${UBUNTU_VERSION}" \
         -t oupfiz5/ubuntu-s6:"${UBUNTU_VERSION}" \
         -t oupfiz5/ubuntu-s6:latest \
         -f ../Dockerfile \
          ../.
#+end_src

#+RESULTS:

** hook/push.sh :code:
#+begin_src sh :results output pp :noweb strip-export :dir ../src/hook
  # shellcheck disable=SC1091
  set -a; source ../VERSION ; set +a;

  # CIS-DI-0005: Enable Content trust for Docker
  export DOCKER_CONTENT_TRUST=1

  docker push oupfiz5/ubuntu-s6:"${UBUNTU_VERSION}"
  docker push oupfiz5/ubuntu-s6:latest
#+end_src

** rootfs/etc/cont-finish.d/.gitignore :code:notangle:
:PROPERTIES:
:header-args:sh: :tangle no
:END:
#+begin_src sh :shebang ""
#+end_src

** rootfs/etc/cont-init.d/00_settimezone.sh :code:
#+begin_src with-contenv :tangle-mode (identity #o755)
  # shellcheck shell=sh

  set -e

  # * User parameters
  TIMEZONE=${TZ:="UTC"}

  TZFILE="../usr/share/zoneinfo/${TIMEZONE}"

  # * Work from the /etc directory
  cd /etc

  if [ -f ${TZFILE} ]; then  # Make sure the file exists
     echo "Setting timezone to ${TIMEZONE}"
     ln -sf ${TZFILE} localtime  # Set the timezone
  else
     echo "Timezone: ${TIMEZONE} not found, skipping"
  fi
#+end_src

** rootfs/etc/fix-attrs.d/.gitignore :code:notangle:
:PROPERTIES:
:header-args:sh: :tangle no
:END:
#+begin_src sh :shebang ""
#+end_src
** rootfs/etc/services.d/.gitignore :code:notangle:
:PROPERTIES:
:header-args:sh: :tangle no
:END:
#+begin_src sh :shebang ""
#+end_src
* Local hooks :noexport:

# Local Variables:
# after-save-hook: (lambda nil (when (org-md-export-to-markdown) (rename-file "core.md" (concat (file-name-directory (mapconcat 'identity (split-string  buffer-file-name "org/") "")) "src/" "Readme.md" )  t )))
# End:

* Manage :noexport:
** Fossil. New branch  :noexport:
  #+begin_src sh :tangle no :dir (concat (file-name-directory (mapconcat 'identity (split-string  buffer-file-name "org/") "")))
    set -a; source ./VERSION ; set +a;

    date
    echo "Branch is $(fossil branch current)"
    BRANCH_NANE="version-${UBUNTU_VERSION}-${S6_OVERLAY_VERSION}"
    echo "fossil create new branch ${BRANCH_NANE}"
    fossil commit -m "Initial commit" --branch "${BRANCH_NANE}"
  #+end_src

  #+RESULTS:
  #+begin_example
  Wed 14 Apr 2021 02:36:47 PM MSK
  Branch is: * trunk
  fossil create new branch version-20.04-2.2.0.3
  Autosync:  https://oupfiz5@chiselapp.com/user/oupfiz5/repository/ubuntu-s6
  Round-trips: 1   Artifacts sent: 0  received: 0
Round-trips: 1   Artifacts sent: 0  received: 0
  Pull done, sent: 471  received: 377  ip: 74.208.146.128
  New_Version: 476760b2fde891a1c8137bd6d0572baf476081b9fd8cc9bf9a1148334385bebe
  Autosync:  https://oupfiz5@chiselapp.com/user/oupfiz5/repository/ubuntu-s6
  Round-trips: 1   Artifacts sent: 6  received: 0
Round-trips: 1   Artifacts sent: 6  received: 0
  Sync done, sent: 1699  received: 328  ip: 74.208.146.128
  #+end_example

** Fossil. Commit + Git export :noexport:
Fill commit mesage above:
#+name: commit-message
#+begin_src org :tangle no
  ci: exported parameter DOCKER_CONTENT_TRUST=1 for CIS-DI-0005 enable Content trust for Docker
#+end_src

  #+begin_src sh :tangle no :dir (concat (file-name-directory (mapconcat 'identity (split-string  buffer-file-name "org/") "")))
    date
    echo "Branch is $(fossil branch current)"
    echo ""
    echo "fossil commit -m ..."
    fossil commit -m "<<commit-message>>" --no-warnings
    echo ""
    echo "fossil git export ..."
    fossil git export
  #+end_src

  #+RESULTS:
  #+begin_example
  Tue 22 Jun 2021 08:24:02 PM MSK
  Branch is add-shellchecks

  fossil commit -m ...
  New_Version: e18d044b2f8f1763ff7536cea93f7ba34b2185eb6108dcd1e83964d025201ffa

  fossil git export ...
  git fast-import --export-marks=.mirror_state/marks.txt --quiet --done
  1/1      1 check-ins added to the /home/opsa/Projects/ubuntu-s6/.github-mirroring/ubuntu-s6.git
  git update-ref "refs/heads/add-shellchecks" 112c5a49102bd8bc2298f3680ee58bc961fb9642
  git push --mirror https://oupfiz5@github.com/oupfiz5/ubuntu-s6.git
  #+end_example
