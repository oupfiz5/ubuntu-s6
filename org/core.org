#+title: Ubuntu base docker image using s6-overlay
* Auxiliary Information                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: auxiliary-information
:END:
The setupfile contain global common property configuration:
#+SETUPFILE: .configuration/global_vars_org.setup
#+SETUPFILE: .configuration/global_property_org.setup
#+SETUPFILE: .configuration/global_vars_html.setup
#+EXPORT_FILE_NAME: ../Readme
#+OPTIONS: auto-id:t

* About
:PROPERTIES:
:CUSTOM_ID: about
:END:

This is [[https://hub.docker.com/_/ubuntu][ubuntu base docker image]] (version 22.04) using [[https://github.com/just-containers/s6-overlay][s6-overlay]].

Ubuntu-s6 is self-hosting at https://chiselapp.com/user/oupfiz5/repository/ubuntu-s6.

If you are reading this on GitHub, then you are looking at a Git mirror of the self-hosting Ubuntu-s6 repository.  The purpose of that mirror is to test and exercise Fossil's ability to export a Git mirror and using Github CI/CD  (Github Actions). Nobody much uses the GitHub mirror, except to verify that the mirror logic works. If you want to know more about Ubuntu-s6, visit the official self-hosting site linked above.

* Table of Contents :TOC_3:noexport:
:PROPERTIES:
:CUSTOM_ID: table-of-contents
:END:
- [[#about][About]]
- [[#prerequisite][Prerequisite]]
  - [[#tools][Tools]]
  - [[#third-party-tools][Third party tools]]
- [[#installation][Installation]]
  - [[#download-from-dockerhub][Download from dockerhub]]
  - [[#build-from-chiselapp-fossil][Build from chiselapp (fossil)]]
  - [[#build-from-github][Build from github]]
- [[#configuration-options][Configuration options]]
  - [[#general-options][General options]]
  - [[#timezone][Timezone]]
- [[#continues-integration][Continues Integration]]
- [[#troubleshooting][Troubleshooting]]
  - [[#log-output][Log output]]
  - [[#shell-access][Shell access]]
- [[#changelogmd][../CHANGELOG.md]]

* Prerequisite
:PROPERTIES:
:CUSTOM_ID: prerequisite
:END:
** Tools
:PROPERTIES:
:CUSTOM_ID: tools
:END:
1. *nix operation system
2. Install Docker
3. Install git (optional)
4. Install fossil (optional)
** Third party tools
:PROPERTIES:
:CUSTOM_ID: third-party-tools
:END:
They are using for testing and scanning:
1. [[https://github.com/bats-core][Bats]]
2. [[https://www.shellcheck.net/][Shellcheck]]
3. [[https://github.com/hadolint/hadolint][Hadolynt]]
4. [[https://github.com/goodwithtech/dockle][Dockle]]
5. Snyk - not necessarily
6. Trivy - not necessarily
* Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
** Download from dockerhub
:PROPERTIES:
:CUSTOM_ID: download-from-dockerhub
:END:
#+begin_example
docker pull oupfiz5/ubuntu-s6:22.04-3.1.4.2
#+end_example

** Build from chiselapp (fossil)
:PROPERTIES:
:CUSTOM_ID: build-from-chiselapp--fossil-
:END:
#+begin_example
fossil clone https://chiselapp.com/user/oupfiz5/repository/ubuntu-s6 ubuntu-s6.fossil
mkdir ubuntu-s6
cd ubuntu-s6
fossil open ../ubuntu-s6.fossil
docker build -t oupfiz5/ubuntu-s6 .
#+end_example

** Build from github
:PROPERTIES:
:CUSTOM_ID: build-from-github
:END:
#+begin_example
git clone https://github.com/oupfiz5/ubuntu-s6.git
cd ubuntu-s6
docker build -t oupfiz5/ubuntu-s6 .
#+end_example

* Configuration options
:PROPERTIES:
:CUSTOM_ID: configuration-options
:END:
** General options
:PROPERTIES:
:CUSTOM_ID: general-options
:END:
|--------+---------+-------------------------------------|
| Option | Default | Description                         |
|--------+---------+-------------------------------------|
| TZ     | UTC     | Set timezone, example Europe/Moscow |
|--------+---------+-------------------------------------|

** Timezone
:PROPERTIES:
:CUSTOM_ID: timezone
:END:
Set the timezone for the container, defaults to UTC. To set the timezone set the desired timezone with the variable TZ.

#+begin_example
docker run -itd --restart always \
           --name ubuntu-s6  \
           --env 'TZ=Europe/Moscow' \
           oupfiz5/ubuntu-s6:22.04-3.1.4.2
#+end_example

* Continues Integration
:PROPERTIES:
:CUSTOM_ID: continues-integration
:END:
For  build and push docker images we use  [[https://github.com/oupfiz5/ubuntu-s6/blob/master/.github/workflows/on-push.yaml][Github Actions workflow]]. Flow process is [[https://guides.github.com/introduction/flow/][GitHub flow]].
* Troubleshooting
:PROPERTIES:
:CUSTOM_ID: troubleshooting
:END:
** Log output
:PROPERTIES:
:CUSTOM_ID: log-output
:END:
For debugging and maintenance purposes you may want access the output log. If you are using Docker version 1.3.0 or higher you can access a running containers shell by starting bash using docker interactive:

#+begin_example
docker run -it --rm \
       --name=ubuntu-s6 \
       oupfiz5/ubuntu-s6:22.04-3.1.4.2
#+end_example

** Shell access
:PROPERTIES:
:CUSTOM_ID: shell-access
:END:
   For debugging and maintenance purposes you may want access the containers shell. If you are using Docker version 1.3.0 or higher you can access a running containers shell by starting bash using docker exec:
#+begin_example
docker exec -it ubuntu-s6 /bin/bash
#+end_example
* ../CHANGELOG.md
#+begin_src md :tangle ../CHANGELOG.md
# Changelog
## 22.04-3.1.4.2 - 2023-05-03

### Added
- image tag `latest` for docker image

### Changed
- s6-overlay migrate to version ([v3.1.4.2](https://github.com/just-containers/s6-overlay/releases))
- `hook/push.sh` push docker image with tag `latest`

### Removed
- Dockerfile for s6-overlay version 2.x
- GitHub pipeline for s6-overlay version 2.x
#+end_src
* Code :code:noexport:
:PROPERTIES:
:CUSTOM_ID: code
:END:
** VERSIONS :code:
:PROPERTIES:
:CUSTOM_ID: versions
:END:
#+begin_src sh :shebang ""
CONTAINER_NAME="${CONTAINER_NAME:-ubuntu-s6}"
S6_OVERLAY_VERSION="${S6_OVERLAY_VERSION:-3.1.4.2}"
S6_OVERLAY_IMAGE_TAG="${S6_OVERLAY_IMAGE_TAG:-3.1.4.2}"
UBUNTU_VERSION="${UBUNTU_VERSION:-22.04}"
IMAGE_NAME="${IMAGE_NAME:-ubuntu-s6}"
IMAGE_REPOSITORY="${IMAGE_REPOSITORY:-oupfiz5}"
IMAGE_TAG="${UBUNTU_VERSION}-${S6_OVERLAY_IMAGE_TAG}"
#+end_src
** ../.fossil-settings/crlf-glob
:PROPERTIES:
:CUSTOM_ID: ----fossil-settings-crlf-glob
:END:
#+begin_src sh :shebang ""
*
#+end_src

** ../.fossil-settings/crlf-glob.no-warn
:PROPERTIES:
:CUSTOM_ID: ----fossil-settings-crlf-glob-no-warn
:END:
#+begin_src sh :shebang ""
*
#+end_src
** ../.fossil-settings/ignore-glob
:PROPERTIES:
:CUSTOM_ID: ----fossil-settings-ignore-glob
:END:
#+begin_src sh :shebang ""
.git/
.github-mirroring/*
docs/
org/.configuration/*
tests/.bats-battery/*/.git
tests/.bats-battery/*/.github
#+end_src
** ../.fossil-settings/crlf-glob
:PROPERTIES:
:CUSTOM_ID: ----fossil-settings-crlf-glob
:END:
#+begin_src sh :shebang ""
*
#+end_src
** ../.github/workflows/on-push.yaml :code:
:PROPERTIES:
:CUSTOM_ID: ----github-workflows-on-push-yaml
:END:
#+begin_src yaml :shebang ""
name: Build and push docker images

on:
  push:
    branches:
      - master
      - main
    paths:
      - '.github/workflows/*'
      - '.github/*'
      - 'src/Dockerfile*'
      - 'src/rootfs/*'
      - 'src/hook/*'
      - 'src/VERSIONS'
      - 'src/*.sh'
      - 'src/VERSIONS'
      - 'tests/**'
  pull_request:
    branches:
      - master
      - main
    paths:
      - '.github/workflows/*'
      - '.github/*'
      - 'src/Dockerfile'
      - 'src/rootfs/*'
      - 'src/hook/*'
      - 'src/*.sh'
      - 'src/VERSIONS'
      - 'tests/**'

jobs:
  build:
    name: Build and push image to dockerhub
    runs-on: ubuntu-22.04
    steps:
      - name: Repo checkout
        uses: actions/checkout@v2

      - name: Login to DockerHub Registry
        run: |
          echo  ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build and push images
        run: |
          cd ${GITHUB_WORKSPACE}/src/hook
          ./build.sh
          ./push.sh
#+end_src

** ../.github/workflows/test.yaml :code:
:PROPERTIES:
:CUSTOM_ID: ----github-workflows-test-yaml
:END:
#+begin_src yaml :shebang ""
name: Check and Tests

# * Controls
# Controls when the action will run.
on:
  push:
    paths:
      - '.github/workflows/*'
      - '.github/*'
      - 'src/Dockerfile*'
      - 'src/rootfs/*'
      - 'src/hook/*'
      - 'src/*.sh'
      - 'src/VERSIONS'
      - 'tests/**'
    branches-ignore:
      - 'master'
      - 'main'
  pull_request:
    paths:
      - '.github/workflows/*'
      - '.github/*'
      - 'src/Dockerfile*'
      - 'src/rootfs/*'
      - 'src/hook/*'
      - 'src/*.sh'
      - 'src/VERSIONS'
      - 'tests/**'
    branches-ignore:
      - 'master'
      - 'main'
  workflow_dispatch:

# * Jobs
jobs:
  checks:
    name: Checks and Tests
    runs-on: ubuntu-22.04
    steps:
      - name: Repo checkout
        uses: actions/checkout@v2

      - name: Check shell files (shellcheck)
        run: |
          sudo apt-get update -y
          sudo apt-get install shellcheck
          cd ${GITHUB_WORKSPACE}/tests
          .bats-battery/bats-core/bin/bats 01.shellchecks.bats

      - name: Check Dockerfile (hadolint)
        run: |
          cd ${GITHUB_WORKSPACE}/tests
          echo "::group::Check Dockerfile"
          .bats-battery/bats-core/bin/bats 02.dockerfile_check.bats
          echo "::endgroup::"

      - name: Build and check image and container.
        run: |
          echo "::group::Build image"
          set -a; source ${GITHUB_WORKSPACE}/src/VERSIONS ; set +a;
          export IMAGE="${IMAGE:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}}"
          echo "Build image"
          cd ${GITHUB_WORKSPACE}/src/hook
          ./build.sh
          echo "::endgroup::"
          echo "::group::Check image and container"
          cd ${GITHUB_WORKSPACE}/tests
          echo "Check docker image (dockle)"
          .bats-battery/bats-core/bin/bats 03.docker_image_check.bats
          echo "Check docker container"
          .bats-battery/bats-core/bin/bats 04.container_check.bats
          echo "::endgroup::"
#+end_src

** ../.github/.trigger_on_push :code:
:PROPERTIES:
:CUSTOM_ID: ----github--trigger-on-push
:END:
#+begin_src sh :shebang ""
Trigger:5
#+end_src
** ../.gitignore :code:
:PROPERTIES:
:CUSTOM_ID: ----gitignore
:END:
#+begin_src sh :shebang ""
.fslckout
.projectile
.fossil-settings/*
#+end_src
** Dockerfile :code:
:PROPERTIES:
:CUSTOM_ID: dockerfile
:END:
#+begin_src sh :shebang ""
# syntax=docker/dockerfile:1.4

# * Base image
ARG UBUNTU_VERSION="${UBUNTU_VERSION}"
FROM ubuntu:${UBUNTU_VERSION}

# * Arguments
ARG S6_OVERLAY_VERSION="${S6_OVERLAY_VERSION}" \
    BUILD_DATE="${BUILD_DATE}" \
    UBUNTU_VERSION="${UBUNTU_VERSION}"

# * Labels
LABEL \
    maintainer="Oupfiz V <oupfiz5@yandex.ru>" \
    org.opencontainers.image.created="${BUILD_DATE}" \
    org.opencontainers.image.authors="Oupfiz V (Five)" \
    org.opencontainers.image.url="https://chiselapp.com/user/oupfiz5/repository/ubuntu-s6/home" \
    org.opencontainers.image.documentation="https://chiselapp.com/user/oupfiz5/repository/ubuntu-s6/wiki" \
    org.opencontainers.image.source="https://chiselapp.com/user/oupfiz5/repository/ubuntu-s6/brlist" \
    org.opencontainers.image.version="0.0.6d" \
    org.opencontainers.image.revision="" \
    org.opencontainers.image.vendor="" \
    org.opencontainers.image.licenses="" \
    org.opencontainers.image.ref.name="" \
    org.opencontainers.image.title="Ubuntu image with s6 init system" \
    org.opencontainers.image.description="Ubuntu base docker image using s6-overlay" \
    org.opencontainers.ubuntu.version="${UBUNTU_VERSION}" \
    org.opencontainers.s6overlay.version="${S6_OVERLAY_VERSION}"

# * Environment

# * Copy
COPY rootfs/ /

# * Add
ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz /tmp
ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-x86_64.tar.xz /tmp
ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-symlinks-noarch.tar.xz /tmp
ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-symlinks-arch.tar.xz /tmp


# * Run
# hadolint ignore=DL3008,DL3003
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata xz-utils --no-install-recommends && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    cd /tmp && \
    tar -C / -Jxpf /tmp/s6-overlay-noarch.tar.xz && \
    tar -C / -Jxpf /tmp/s6-overlay-x86_64.tar.xz && \
    tar -C / -Jxpf /tmp/s6-overlay-symlinks-noarch.tar.xz && \
    tar -C / -Jxpf /tmp/s6-overlay-symlinks-arch.tar.xz && \
    rm /tmp/s6-overlay-noarch.tar.xz && \
    rm /tmp/s6-overlay-x86_64.tar.xz && \
    rm /tmp/s6-overlay-symlinks-noarch.tar.xz && \
    rm /tmp/s6-overlay-symlinks-arch.tar.xz


# * Entrypoint
ENTRYPOINT ["/init"]
#+end_src
** hook/build.sh :code:
:PROPERTIES:
:CUSTOM_ID: hook-build-sh
:END:
#+begin_src sh  :results output pp :noweb strip-export :dir ../src/hook
# shellcheck disable=SC1091
set -a; source ../VERSIONS ; set +a;

IMAGE="${IMAGE:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}}"
IMAGE_LATEST="${IMAGE_LATEST:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:latest}"
DOCKERFILE="${DOCKERFILE:-Dockerfile}"

docker buildx build \
    --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
    --build-arg S6_OVERLAY_VERSION="${S6_OVERLAY_VERSION}" \
    --build-arg UBUNTU_VERSION="${UBUNTU_VERSION}" \
    --tag "${IMAGE}" \
    --file ../"${DOCKERFILE}" \
    --tag "${IMAGE_LATEST}" \
    ../.
#+end_src

** hook/push.sh :code:notangle:
:PROPERTIES:
:CUSTOM_ID: hook-push-sh
:END:
#+begin_src sh :results output pp :noweb strip-export :dir ../src/hook :tangle no
# shellcheck disable=SC1091
set -a; source ../VERSIONS ; set +a;

# * Push docker images using full tag
IMAGE="${IMAGE:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}}"
IMAGE_LATEST="${IMAGE_LATEST:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:latest}"
docker push "${IMAGE}" "${IMAGE_LATEST}"

# * Push docker images using latest tag
IMAGE="${IMAGE_REPOSITORY}/${IMAGE_NAME}:latest"
docker push "${IMAGE}"
#+end_src

** hook/push.sh :code:
:PROPERTIES:
:CUSTOM_ID: hook-push-sh
:END:
#+begin_src sh :results output pp :noweb strip-export :dir ../src/hook
# shellcheck disable=SC1091
set -a; source ../VERSIONS ; set +a;

# * Push docker images
IMAGE="${IMAGE:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}}"
IMAGE_LATEST="${IMAGE_LATEST:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:latest}"

docker image tag "${IMAGE}" "${IMAGE}"
docker image tag "${IMAGE}" "${IMAGE_LATEST}"
docker image push "${IMAGE}"
docker image push "${IMAGE_LATEST}"
#+end_src

** rootfs/etc/cont-finish.d/.gitignore :code:notangle:
:PROPERTIES:
:header-args:sh: :tangle no
:CUSTOM_ID: rootfs-etc-cont-finish-d--gitignore
:END:
#+begin_src sh :shebang ""
#+end_src

** rootfs/etc/cont-init.d/00_settimezone.sh :code:
:PROPERTIES:
:CUSTOM_ID: rootfs-etc-cont-init-d-00-settimezone-sh
:END:
#+begin_src with-contenv :tangle-mode (identity #o755)
# shellcheck shell=sh

set -e

# * User parameters
TIMEZONE=${TZ:="UTC"}

TZFILE="../usr/share/zoneinfo/${TIMEZONE}"

# * Work from the /etc directory
cd /etc

if [ -f ${TZFILE} ]; then  # Make sure the file exists
    echo "Setting timezone to ${TIMEZONE}"
    ln -sf ${TZFILE} localtime  # Set the timezone
else
    echo "Timezone: ${TIMEZONE} not found, skipping"
fi
#+end_src

** rootfs/etc/fix-attrs.d/.gitignore :code:notangle:
:PROPERTIES:
:header-args:sh: :tangle no
:CUSTOM_ID: rootfs-etc-fix-attrs-d--gitignore
:END:
#+begin_src sh :shebang ""
#+end_src
** rootfs/etc/services.d/.gitignore :code:notangle:
:PROPERTIES:
:header-args:sh: :tangle no
:CUSTOM_ID: rootfs-etc-services-d--gitignore
:END:
#+begin_src sh :shebang ""
#+end_src
* Tests :test:noexport:
:PROPERTIES:
:header-args:bats+:   :tangle (concat (file-name-directory (mapconcat 'identity (split-string  buffer-file-name "org/") "")) "/tests/" (nth 4 (org-heading-components)) )
:header-args:sh+:  :tangle (concat (file-name-directory (mapconcat 'identity (split-string  buffer-file-name "org/") "")) "/tests/" (nth 4 (org-heading-components)) )
:CUSTOM_ID: tests
:END:
** 01.shellchecks.bats :test:
:PROPERTIES:
:CUSTOM_ID: 01-shellchecks-bats
:END:
#+begin_src bats :results output pp :noweb strip-export
setup() {
    targets=()
    while IFS=  read -r -d $'\0'; do
        targets+=("$REPLY")
    done < <(
        find \
            ../src/rootfs/etc \
            ../src/hook \
            -type f \
            -print0
    )
}

@test "Check shell files" {
    run export LC_ALL=C.UTF-8; shellcheck "${targets[@]}"
    assert_success
}

@test "Check VERSIONS file" {
    run export LC_ALL=C.UTF-8; shellcheck --shell=sh --exclude=SC2034 ../src/VERSIONS
    assert_success
}

#+end_src

** 02.dockerfile_check.bats :test:
:PROPERTIES:
:CUSTOM_ID: 02-dockerfile-check-bats
:END:
#+begin_src bats :results output pp :noweb strip-export
setup() {
   DOCKERFILE="${DOCKERFILE:-Dockerfile}"
}

@test "Check Dockerfile" {
      run docker run --rm -i -v "${PWD}/../src":/work --workdir=/work  hadolint/hadolint hadolint -f json "${DOCKERFILE}"
      assert_success
}
#+end_src

** 03.docker_image_check.bats :test:
:PROPERTIES:
:CUSTOM_ID: 03-docker-image-check-bats
:END:

#+begin_src bats :results output pp :noweb strip-export

setup() {
      . ../src/VERSIONS
      IMAGE="${IMAGE:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}}"

      VERSION=$(
      curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
          grep '"tag_name":' | \
          sed -E 's/.*"v([^"]+)".*/\1/' \
      )
  }

@test "Check docker image" {
    run docker run --rm \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v "$(pwd)"/.dockleignore:/.dockleignore \
        goodwithtech/dockle:v"${VERSION}" \
        --exit-code 1 \
        --exit-level fatal \
        "${IMAGE}"
    assert_success
  }
#+end_src

** 04.container_check.bats :test:
:PROPERTIES:
:CUSTOM_ID: 04-container-check-bats
:END:
#+begin_src bats :results output pp :noweb strip-export

setup() {
    . ../src/VERSIONS
    IMAGE="${IMAGE:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}}"
}

@test "Verify container run" {
      run docker run -d --rm --name="${CONTAINER_NAME}" "${IMAGE}"
      assert_success
}

@test "Verify state status container - running" {
      sleep 5
      run docker inspect --format 'result={{ .State.Status }}' "${CONTAINER_NAME}"
      assert_success
      assert_output 'result=running'
}

@test "Verify state running container - true" {
      run docker inspect --format 'result={{ .State.Running }}' "${CONTAINER_NAME}"
      assert_success
      assert_output 'result=true'
}

@test "Verify state restarting container - false" {
      run docker inspect --format 'result={{ .State.Restarting }}' "${CONTAINER_NAME}"
      assert_success
      assert_output 'result=false'
}

@test "Verify state error container - <empty>" {
      run docker inspect --format 'result={{ .State.Error }}' "${CONTAINER_NAME}"
      assert_success
      assert_output 'result='
}

@test "Verify restart count container - 0" {
      run docker inspect --format 'result={{ .RestartCount }}' "${CONTAINER_NAME}"
      assert_success
      assert_output 'result=0'
}

# @test "Verify AppArmor Profile - if applicable" {
#       skip
#       run docker inspect --format 'AppArmorProfile={{ .AppArmorProfile }}' "${CONTAINER_NAME}"
#       assert_success
#       refute_output "AppArmorProfile=[]"
#       refute_output "AppArmorProfile="
#       refute_output "AppArmorProfile=<no value>"
# }

@test "Verify container stop" {
      run docker container stop "${CONTAINER_NAME}"
      assert_success
}

#+end_src

** shellcheck.sh :test:noexport:notangle:
:PROPERTIES:
:CUSTOM_ID: shellcheck-sh
:END:
#+begin_src sh :results output pp :noweb strip-export :tangle no
set -e

targets=()
while IFS=  read -r -d $'\0'; do
    targets+=("$REPLY")
done < <(
  find \
    ../src/rootfs/etc \
    ../src/hook \
    -type f \
    -print0
  )


echo "Shellcheck files"
LC_ALL=C.UTF-8 shellcheck "${targets[@]}"

# VERSION were exclude from main check (above)
# exclude warning https://github.com/koalaman/shellcheck/wiki/SC2034
echo "Shellcheck VERSION"
#LC_ALL=C.UTF-8 shellcheck --shell=sh --exclude=SC2034 VERSION

exit $?
#+end_src

** docker_image_check.sh :test:noexport:notangle:
:PROPERTIES:
:CUSTOM_ID: docker-image-check-sh
:END:
#+begin_src sh :results output pp :noweb strip-export :tangle no
set -e
IMAGE_NAME="${1:-oupfiz5/ubuntu-s6:latest}"

# * Install dockle and check targets
# Pay attention: some checks are ignored using .dockleignore
VERSION=$(
    curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
        grep '"tag_name":' | \
        sed -E 's/.*"v([^"]+)".*/\1/' \
        ) && docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v "$(pwd)"/.dockleignore:/.dockleignore \
          goodwithtech/dockle:v"${VERSION}" \
          --exit-code 1 \
          --exit-level fatal \
          "${IMAGE_NAME}"
exit $?
#+end_src

** .dockleignore :test:
:PROPERTIES:
:CUSTOM_ID: -dockleignore
:END:
#+begin_src sh :shebang ""
# Use COPY instead of ADD in Dockerfile because need to add s6-overlay from urlencode
CIS-DI-0009
# Use latest tag because to check the image inside only
DKL-DI-0006
# set root to default user because it will be use for next build
CIS-DI-0001
#+end_src
** dockerfile_check.sh :test:noexport:notangle:
:PROPERTIES:
:CUSTOM_ID: dockerfile-check-sh
:END:
#+begin_src sh :results output pp :noweb strip-export :tangle no
set -e

# * Get list of targets
targets=()
while IFS=  read -r -d $'\0'; do
    targets+=("$REPLY")
done < <(
    find \
        ../src/Dockerfile \
        -type f \
        -print0
)

# * Pull hadolint and check targets
echo Test Dockerfile
docker run --rm -i hadolint/hadolint < "${targets[@]}" && echo "Success"

exit $?
#+end_src

* TODO Next steps :noexport:notangle:
:PROPERTIES:
:CUSTOM_ID: next-steps
:END:
** Security scan
:PROPERTIES:
:CUSTOM_ID: security-scan
:END:
- add tools:
    - Snyk
  - Trivy
- add report security artifacts
